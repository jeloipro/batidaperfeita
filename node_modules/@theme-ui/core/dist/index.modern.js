import { jsx as jsx$1, ThemeContext } from '@emotion/react';
import { css } from '@theme-ui/css';
import { createContext, useContext } from 'react';
import deepmerge from 'deepmerge';
import packageInfo from '@emotion/react/package.json';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

const __EMOTION_VERSION__ = packageInfo.version;

const getCSS = props => {
  if (!props.sx && !props.css) return undefined;
  return theme => {
    const styles = css(props.sx)(theme);
    const raw = typeof props.css === 'function' ? props.css(theme) : props.css;
    return [styles, raw];
  };
};

const parseProps = props => {
  if (!props) return null;
  const next = {};

  for (let key in props) {
    if (key === 'sx') continue;
    next[key] = props[key];
  }

  const css = getCSS(props);
  if (css) next.css = css;
  return next;
};

const jsx = (type, props, ...children) => jsx$1.apply(undefined, [type, parseProps(props), ...children]);
const Context = createContext({
  __EMOTION_VERSION__,
  theme: {}
});
const useThemeUI = () => useContext(Context);
const canUseSymbol = typeof Symbol === 'function' && Symbol.for;
const REACT_ELEMENT = canUseSymbol ? Symbol.for('react.element') : 0xeac7;
const FORWARD_REF = canUseSymbol ? Symbol.for('react.forward_ref') : 0xeac7;

const isMergeableObject = n => {
  return !!n && typeof n === 'object' && n.$$typeof !== REACT_ELEMENT && n.$$typeof !== FORWARD_REF;
};

const arrayMerge = (destinationArray, sourceArray, options) => sourceArray;
/**
 * Deeply merge themes
 */


const merge = (a, b) => deepmerge(a, b, {
  isMergeableObject,
  arrayMerge
});

function mergeAll(...args) {
  return deepmerge.all(args, {
    isMergeableObject,
    arrayMerge
  });
}

merge.all = mergeAll;

const BaseProvider = ({
  context,
  children
}) => jsx(ThemeContext.Provider, {
  value: context.theme
}, jsx(Context.Provider, {
  value: context,
  children
}));

function ThemeProvider({
  theme,
  children
}) {
  const outer = useThemeUI();

  if (process.env.NODE_ENV !== 'production') {
    if (outer.__EMOTION_VERSION__ !== __EMOTION_VERSION__) {
      console.warn('Multiple versions of Emotion detected,', 'and theming might not work as expected.', 'Please ensure there is only one copy of @emotion/react installed in your application.');
    }
  }

  const context = typeof theme === 'function' ? _extends({}, outer, {
    theme: theme(outer.theme)
  }) : merge.all({}, outer, {
    theme
  });
  return jsx(BaseProvider, {
    context
  }, children);
}

export { Context, ThemeProvider, jsx, merge, useThemeUI };
//# sourceMappingURL=index.modern.js.map
