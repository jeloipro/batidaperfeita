{"version":3,"sources":["src/gatsby-node.js"],"names":["makeRelative","require","walkObject","obj","iteratee","ignoreKeys","prop","indexOf","walkArray","arr","map","i","result","exports","onCreateNode","options","node","getNode","commonProps","nodeAbsPath","val","internal","type","fileAbsolutePath","frontmatter","test","parent","absolutePath"],"mappings":"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","file":"gatsby-node.js","sourcesContent":["const makeRelative = require(`./make-relative`)\n\nconst walkObject = async (obj, iteratee, ignoreKeys = []) => {\n\tfor (let prop in obj) {\n\t\tif ( ignoreKeys.indexOf(prop) !== -1 ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tswitch (typeof obj[prop]) {\n\t\t\tcase 'array':\n\t\t\t\tobj[prop] = await walkArray(obj[prop], iteratee, ignoreKeys)\n\t\t\t\tbreak;\n\t\t\tcase 'object':\n\t\t\t\tobj[prop] = await walkObject(obj[prop], iteratee, ignoreKeys)\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tobj[prop] = await iteratee(obj[prop])\n\t\t}\n\t}\n\n\treturn obj\n}\n\nconst walkArray = async (arr, iteratee, ignoreKeys = []) => {\n\treturn arr.map( async (i) => {\n\t\tlet result\n\n\t\tswitch (typeof i) {\n\t\t\tcase 'array':\n\t\t\t\tresult = await walkArray(i, iteratee, ignoreKeys)\n\t\t\t\tbreak;\n\t\t\tcase 'object':\n\t\t\t\tresult = await walkObject(i, iteratee, ignoreKeys)\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tresult = await iteratee(i)\n\t\t}\n\n\t\treturn result\n\t} )\n}\n\nexports.onCreateNode = async ({ node, getNode }, options) => {\n\tconst commonProps = ['id', '_PARENT', 'parent', 'children', 'internal']\n\n\tlet nodeAbsPath\n\n\tconst iteratee = async (val) => {\n\t\treturn await makeRelative(nodeAbsPath, val, options)\n\t}\n\t\n\tif (node.internal.type === `MarkdownRemark` || node.internal.type === `Mdx`) {\n\t\tnodeAbsPath = node.fileAbsolutePath\n\n\t\tif(typeof node.frontmatter === `object`) {\n\t\t\tawait walkObject(node.frontmatter, iteratee, commonProps)\n\t\t}\n\t} else if (/^\\w+(Yaml|Json)$/.test(node.internal.type) ) {\n\t\tnodeAbsPath = getNode(node.parent).absolutePath\n\n\t\tawait walkObject(node, iteratee, commonProps)\n\t}\n}\n"]}